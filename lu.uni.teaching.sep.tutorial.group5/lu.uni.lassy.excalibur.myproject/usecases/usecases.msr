package lu.uni.lassy.excalibur.myproject.usecases {

import lu.uni.lassy.messir.libraries.calendar
import lu.uni.lassy.messir.libraries.math
import lu.uni.lassy.messir.libraries.primitives
import lu.uni.lassy.messir.libraries.string

	Use Case Model {
		use case system summary suDeployAndRun() {
		actor lu.uni.lassy.excalibur.myproject.environment.actSystemAdministrator[primary, active]
		
		reuse lu.uni.lassy.excalibur.myproject.usecases.sfCreateSystemEnvironment[0..1]
		reuse lu.uni.lassy.excalibur.myproject.usecases.ugManageLibrarians[1..*]
		reuse lu.uni.lassy.excalibur.myproject.usecases.sfLogin[0..1]
		reuse lu.uni.lassy.excalibur.myproject.usecases.sfLogout[0..1]
		
		step a: lu.uni.lassy.excalibur.myproject.environment.actSystemAdministrator executes sfCreateSystemEnvironment
		step b: lu.uni.lassy.excalibur.myproject.environment.actSystemAdministrator executes sfLogin
		step c: lu.uni.lassy.excalibur.myproject.environment.actSystemAdministrator executes ugManageLibrarians
		step d: lu.uni.lassy.excalibur.myproject.environment.actSystemAdministrator executes sfLogout
		
		ordering constraint
			"step a must be executed first."
		ordering constraint
			"step b must always come before step c."
		ordering constraint
			"step d must be the last."
		}
		
	use case system usergoal ugManageLibrarians() {
		actor lu.uni.lassy.excalibur.myproject.environment.actSystemAdministrator[primary, active]
		
		reuse lu.uni.lassy.excalibur.myproject.usecases.sfLibrarian[0..*]
		reuse lu.uni.lassy.excalibur.myproject.usecases.sfAddLibrarian[0..*]
		reuse lu.uni.lassy.excalibur.myproject.usecases.sfEditLibrarian[0..*]
		reuse lu.uni.lassy.excalibur.myproject.usecases.sfDeleteLibrarian[0..*]
		
		step a: lu.uni.lassy.excalibur.myproject.environment.actSystemAdministrator executes sfLibrarian
		step b: lu.uni.lassy.excalibur.myproject.environment.actSystemAdministrator executes sfAddLibrarian
		step c: lu.uni.lassy.excalibur.myproject.environment.actSystemAdministrator executes sfEditLibrarian
		step d: lu.uni.lassy.excalibur.myproject.environment.actSystemAdministrator executes sfDeleteLibrarian
		
		ordering constraint
			"step a must always be the first one."
		
		}	
	

	use case system subfunction sfAddLibrarian() {
			actor lu.uni.lassy.excalibur.myproject.environment.actSystemAdministrator[primary, passive]
			returned messages{
				ieLibrarianAdded returned to lu.uni.lassy.excalibur.myproject.environment.actSystemAdministrator
			}
		}
	use case system subfunction sfDeleteLibrarian() {
			actor lu.uni.lassy.excalibur.myproject.environment.actSystemAdministrator[primary, active]
			
			returned messages{
				ieLibrarianDeleted returned to lu.uni.lassy.excalibur.myproject.environment.actSystemAdministrator
			}
		
		}
	use case system subfunction sfEditLibrarian() {
			actor lu.uni.lassy.excalibur.myproject.environment.actSystemAdministrator[primary, active]
			
			returned messages{
				ieLibrarianEdited returned to lu.uni.lassy.excalibur.myproject.environment.actSystemAdministrator
			}
		}
	
	use case system subfunction sfLibrarian() {
			actor lu.uni.lassy.excalibur.myproject.environment.actSystemAdministrator[primary, active]
			
			returned messages{
				ieLibrarians() returned to lu.uni.lassy.excalibur.myproject.environment.actSystemAdministrator
			}
		}
		
	use case system subfunction sfViewAndSearchLibrarian() {
			actor lu.uni.lassy.excalibur.myproject.environment.actSystemAdministrator[primary, active]
			
			returned messages{
				ieLibrarian() returned to lu.uni.lassy.excalibur.myproject.environment.actSystemAdministrator
			}
		}
	
		
	use case system subfunction sfLogin() {
			actor lu.uni.lassy.excalibur.myproject.environment.actSystemAdministrator[primary, active]
			returned messages{
				ieLogin returned to lu.uni.lassy.excalibur.myproject.environment.actSystemAdministrator
			}
		}
	use case system subfunction sfLogout() {
			actor lu.uni.lassy.excalibur.myproject.environment.actSystemAdministrator[primary, active]
			returned messages{
				ieLogout returned to lu.uni.lassy.excalibur.myproject.environment.actSystemAdministrator
			}	
		
		}
	
	use case system subfunction sfSendMessage() {
			actor lu.uni.lassy.excalibur.myproject.environment.actSystemAdministrator[primary, active]
			returned messages{
				ieMessageSent returned to lu.uni.lassy.excalibur.myproject.environment.actSystemAdministrator
			}
		}
	
	
	use case system subfunction sfReceiveMessage() {
			actor lu.uni.lassy.excalibur.myproject.environment.actSystemAdministrator[primary, active]
			returned messages{
				ieMessageReceived returned to lu.uni.lassy.excalibur.myproject.environment.actSystemAdministrator
			}
		}
	use case system subfunction sfCreateSystemEnvironment() {
			actor lu.uni.lassy.excalibur.myproject.environment.actSystemAdministrator[primary, active]
		}
		
	use case system usergoal ugManageMessages() {
		actor lu.uni.lassy.excalibur.myproject.environment.actSystemAdministrator[primary, active]
		
		reuse lu.uni.lassy.excalibur.myproject.usecases.sfSendMessage[0..*]
		reuse lu.uni.lassy.excalibur.myproject.usecases.sfReceiveMessage[0..*]	
		
		step a: lu.uni.lassy.excalibur.myproject.environment.actSystemAdministrator executes sfSendMessage
		step b: lu.uni.lassy.excalibur.myproject.environment.actSystemAdministrator executes sfReceiveMessage	
		
		}
	}
}