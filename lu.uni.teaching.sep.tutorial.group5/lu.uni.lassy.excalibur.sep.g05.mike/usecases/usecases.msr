/*
* @author nicentra
* @date Tue Nov 21 23:30:54 CET 2017
*/

package lu.uni.lassy.excalibur.myproject.usecases {

import lu.uni.lassy.messir.libraries.calendar
import lu.uni.lassy.messir.libraries.math
import lu.uni.lassy.messir.libraries.primitives
import lu.uni.lassy.messir.libraries.string



	Use Case Model {
		
	use case system subfunction sfAccessCustomerDatabase() {
			actor lu.uni.lassy.excalibur.myproject.environment.actLibrarian[primary, active]
			returned messages{
				ieCustomerDatabase returned to lu.uni.lassy.excalibur.myproject.environment.actLibrarian
			}
		}
		
	use case system subfunction sfSearchCustomer() {
		actor lu.uni.lassy.excalibur.myproject.environment.actLibrarian[primary, active]
		returned messages{
			ieCustomerQuery returned to lu.uni.lassy.excalibur.myproject.environment.actLibrarian
		}
	}

	use case system subfunction sfInspectCustomer() {
		actor lu.uni.lassy.excalibur.myproject.environment.actLibrarian[primary, active]
		returned messages{
			ieCustomerProfile returned to lu.uni.lassy.excalibur.myproject.environment.actLibrarian
		}
	}
		
	use case system subfunction sfAddLoan() {
		actor lu.uni.lassy.excalibur.myproject.environment.actLibrarian[primary, active]
		returned messages{
			ieLoan returned to lu.uni.lassy.excalibur.myproject.environment.actLibrarian
		}
	}
	use case system subfunction sfReturnBook() {
		actor lu.uni.lassy.excalibur.myproject.environment.actLibrarian[primary, active]
		returned messages{
			ieReturnedBook returned to lu.uni.lassy.excalibur.myproject.environment.actLibrarian
		}
	}
	
	use case system subfunction sfSuspendCustomer() {
		actor lu.uni.lassy.excalibur.myproject.environment.actLibrarian[primary, active]
		returned messages{
			ieCustomerSuspended returned to lu.uni.lassy.excalibur.myproject.environment.actLibrarian
		}
	}
	
	use case system subfunction sfReinstateCustomer() {
		actor lu.uni.lassy.excalibur.myproject.environment.actLibrarian[primary, active]
		returned messages{
			ieCustomerReinstated returned to lu.uni.lassy.excalibur.myproject.environment.actLibrarian
		}
	}
	
	use case system subfunction sfRequestCustomerBan() {
		actor lu.uni.lassy.excalibur.myproject.environment.actLibrarian[primary, active]
		returned messages{
			ieSentBanRequest returned to lu.uni.lassy.excalibur.myproject.environment.actLibrarian
		}
	}
	
	use case system subfunction sfRequestCustomerUnban() {
		actor lu.uni.lassy.excalibur.myproject.environment.actLibrarian[primary, active]
		returned messages{
			ieSentUnbanRequest returned to lu.uni.lassy.excalibur.myproject.environment.actLibrarian
		}
	}
	
	use case system subfunction sfSetNote() {
		actor lu.uni.lassy.excalibur.myproject.environment.actLibrarian[primary, active]
		returned messages{
			ieSetNote returned to lu.uni.lassy.excalibur.myproject.environment.actLibrarian
		}
	}
	
	use case system subfunction sfAccessBookDatabase() {
		actor lu.uni.lassy.excalibur.myproject.environment.actLibrarian[primary, active]
		returned messages{
			ieBookDatabase returned to lu.uni.lassy.excalibur.myproject.environment.actLibrarian
		}
	}
	
	use case system subfunction sfSearchBook() {
		actor lu.uni.lassy.excalibur.myproject.environment.actLibrarian[primary, active]
		returned messages{
			ieBookQuery returned to lu.uni.lassy.excalibur.myproject.environment.actLibrarian
		}
	}
	
	use case system subfunction sfAddBook() {
		actor lu.uni.lassy.excalibur.myproject.environment.actLibrarian[primary, active]
		returned messages{
			ieBookAdded returned to lu.uni.lassy.excalibur.myproject.environment.actLibrarian
		}
	}
	
	use case system subfunction sfRemoveBook() {
		actor lu.uni.lassy.excalibur.myproject.environment.actLibrarian[primary, active]
		returned messages{
			ieBookRemoved returned to lu.uni.lassy.excalibur.myproject.environment.actLibrarian
		}
	}
	
	use case system usergoal ugManagingLoans() {
			actor lu.uni.lassy.excalibur.myproject.environment.actLibrarian[primary, active]
			reuse lu.uni.lassy.excalibur.myproject.usecases.sfAddLoan[0..*]
			reuse lu.uni.lassy.excalibur.myproject.usecases.sfReturnBook[0..*]
			
			step a: lu.uni.lassy.excalibur.myproject.environment.actLibrarian executes sfAddLoan()
			step b: lu.uni.lassy.excalibur.myproject.environment.actLibrarian executes sfReturnBook()
			
			ordering constraint "step a must be executed first"
	}
	
	use case system usergoal ugSuspendCustomer() {
			actor lu.uni.lassy.excalibur.myproject.environment.actLibrarian[primary, active]
			reuse lu.uni.lassy.excalibur.myproject.usecases.sfAccessCustomerDatabase[1..1]
			reuse lu.uni.lassy.excalibur.myproject.usecases.sfSearchCustomer[1..1]
			reuse lu.uni.lassy.excalibur.myproject.usecases.sfInspectCustomer[1..1]
			reuse lu.uni.lassy.excalibur.myproject.usecases.sfSuspendCustomer[1..1]
			
			step a: lu.uni.lassy.excalibur.myproject.environment.actLibrarian executes sfAccessCustomerDatabase()
			step b: lu.uni.lassy.excalibur.myproject.environment.actLibrarian executes sfSearchCustomer()
			step c: lu.uni.lassy.excalibur.myproject.environment.actLibrarian executes sfInspectCustomer()
			step d: lu.uni.lassy.excalibur.myproject.environment.actLibrarian executes sfSuspendCustomer()
			
			ordering constraint "step a must be executed first"
			ordering constraint "step b must be executed second"
			ordering constraint "step c must be executed third"
			ordering constraint "step d must be executed fourth"			
	}
	
	use case system usergoal ugReinstateCustomer() {
			actor lu.uni.lassy.excalibur.myproject.environment.actLibrarian[primary, active]
			reuse lu.uni.lassy.excalibur.myproject.usecases.sfAccessCustomerDatabase[1..1]
			reuse lu.uni.lassy.excalibur.myproject.usecases.sfSearchCustomer[1..1]
			reuse lu.uni.lassy.excalibur.myproject.usecases.sfInspectCustomer[1..1]
			reuse lu.uni.lassy.excalibur.myproject.usecases.sfReinstateCustomer[1..1]
			
			step a: lu.uni.lassy.excalibur.myproject.environment.actLibrarian executes sfAccessCustomerDatabase()
			step b: lu.uni.lassy.excalibur.myproject.environment.actLibrarian executes sfSearchCustomer()
			step c: lu.uni.lassy.excalibur.myproject.environment.actLibrarian executes sfInspectCustomer()
			step d: lu.uni.lassy.excalibur.myproject.environment.actLibrarian executes sfReinstateCustomer()
			
			ordering constraint "step a must be executed first"
			ordering constraint "step b must be executed second"
			ordering constraint "step c must be executed third"
			ordering constraint "step d must be executed fourth"			
	}
	
	use case system usergoal ugRequestCustomerBan() {
			actor lu.uni.lassy.excalibur.myproject.environment.actLibrarian[primary, active]
			reuse lu.uni.lassy.excalibur.myproject.usecases.sfAccessCustomerDatabase[1..1]
			reuse lu.uni.lassy.excalibur.myproject.usecases.sfSearchCustomer[1..1]
			reuse lu.uni.lassy.excalibur.myproject.usecases.sfInspectCustomer[1..1]
			reuse lu.uni.lassy.excalibur.myproject.usecases.sfRequestCustomerBan[1..1]
			
			step a: lu.uni.lassy.excalibur.myproject.environment.actLibrarian executes sfAccessCustomerDatabase()
			step b: lu.uni.lassy.excalibur.myproject.environment.actLibrarian executes sfSearchCustomer()
			step c: lu.uni.lassy.excalibur.myproject.environment.actLibrarian executes sfInspectCustomer()
			step d: lu.uni.lassy.excalibur.myproject.environment.actLibrarian executes sfRequestCustomerBan()
			
			ordering constraint "step a must be executed first"
			ordering constraint "step b must be executed second"
			ordering constraint "step c must be executed third"
			ordering constraint "step d must be executed fourth"			
	}
	
	use case system usergoal ugRequestCustomerUnban() {
			actor lu.uni.lassy.excalibur.myproject.environment.actLibrarian[primary, active]
			reuse lu.uni.lassy.excalibur.myproject.usecases.sfAccessCustomerDatabase[1..1]
			reuse lu.uni.lassy.excalibur.myproject.usecases.sfSearchCustomer[1..1]
			reuse lu.uni.lassy.excalibur.myproject.usecases.sfInspectCustomer[1..1]
			reuse lu.uni.lassy.excalibur.myproject.usecases.sfRequestCustomerUnban[1..1]
			
			step a: lu.uni.lassy.excalibur.myproject.environment.actLibrarian executes sfAccessCustomerDatabase()
			step b: lu.uni.lassy.excalibur.myproject.environment.actLibrarian executes sfSearchCustomer()
			step c: lu.uni.lassy.excalibur.myproject.environment.actLibrarian executes sfInspectCustomer()
			step d: lu.uni.lassy.excalibur.myproject.environment.actLibrarian executes sfRequestCustomerUnban()
			
			ordering constraint "step a must be executed first"
			ordering constraint "step b must be executed second"
			ordering constraint "step c must be executed third"
			ordering constraint "step d must be executed fourth"			
	}
	
	use case system usergoal ugSetNote() {
			actor lu.uni.lassy.excalibur.myproject.environment.actLibrarian[primary, active]
			reuse lu.uni.lassy.excalibur.myproject.usecases.sfAccessCustomerDatabase[1..1]
			reuse lu.uni.lassy.excalibur.myproject.usecases.sfSearchCustomer[1..1]
			reuse lu.uni.lassy.excalibur.myproject.usecases.sfInspectCustomer[1..1]
			reuse lu.uni.lassy.excalibur.myproject.usecases.sfSetNote[1..1]
			
			step a: lu.uni.lassy.excalibur.myproject.environment.actLibrarian executes sfAccessCustomerDatabase()
			step b: lu.uni.lassy.excalibur.myproject.environment.actLibrarian executes sfSearchCustomer()
			step c: lu.uni.lassy.excalibur.myproject.environment.actLibrarian executes sfInspectCustomer()
			step d: lu.uni.lassy.excalibur.myproject.environment.actLibrarian executes sfSetNote()
			
			ordering constraint "step a must be executed first"
			ordering constraint "step b must be executed second"
			ordering constraint "step c must be executed third"
			ordering constraint "step d must be executed fourth"			
	}
	
	use case system usergoal ugAddBook() {
			actor lu.uni.lassy.excalibur.myproject.environment.actLibrarian[primary, active]
			reuse lu.uni.lassy.excalibur.myproject.usecases.sfAccessBookDatabase[1..1]
			reuse lu.uni.lassy.excalibur.myproject.usecases.sfAddBook[1..*]
			
			step a: lu.uni.lassy.excalibur.myproject.environment.actLibrarian executes sfAccessBookDatabase()
			step b: lu.uni.lassy.excalibur.myproject.environment.actLibrarian executes sfAddBook()
			
			ordering constraint "step a must be executed first"		
	}
	
	use case system usergoal ugRemoveBook() {
			actor lu.uni.lassy.excalibur.myproject.environment.actLibrarian[primary, active]
			reuse lu.uni.lassy.excalibur.myproject.usecases.sfAccessBookDatabase[1..1]
			reuse lu.uni.lassy.excalibur.myproject.usecases.sfRemoveBook[1..*]
			
			step a: lu.uni.lassy.excalibur.myproject.environment.actLibrarian executes sfAccessBookDatabase()
			step b: lu.uni.lassy.excalibur.myproject.environment.actLibrarian executes sfRemoveBook()
			
			ordering constraint "step a must be executed first"		
	}
	}
}